const xlsx = require('xlsx');
const puppeteer = require('puppeteer');
const path = require('path');
const stringSimilarity = require('string-similarity');

// === –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ó –ö–û–ú–ê–ù–î–ù–û–ô –°–¢–†–û–ö–ò ===
const args = process.argv.slice(2);
const START_ROW = args[0] ? parseInt(args[0], 10) : 0;
const MAX_ROWS = args[1] ? (args[1] === 'null' || args[1] === '' ? null : parseInt(args[1], 10)) : null;
const HEADLESS = args[2] ? (args[2] === 'true' || args[2] === '1') : false;

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const FORM_URL = 'YOUR_GOOGLE_FORM_URL_HERE'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É Google —Ñ–æ—Ä–º—ã
const EXCEL_FILE = path.join(__dirname, 'moscow_sport_data.xlsx');
const DELAY_BETWEEN = [2000, 4000]; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–º—Å)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º–æ–≤
function calculateSimilarity(str1, str2) {
  const s1 = str1.toLowerCase();
  const s2 = str2.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (s1 === s2) return 1.0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ
  if (s1.includes(s2) || s2.includes(s1)) return 0.8;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
  const synonyms = {
    '—Ä–µ–¥–∫–æ': ['—Ä–µ–∂–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü', '—Ä–∞–∑ –≤ –º–µ—Å—è—Ü'],
    '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': ['—Ç–µ–ª–µ—Ñ–æ–Ω'],
    '–∞–∫—Ç—É–∞–ª—å–Ω–∞—è': ['–≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞'],
    '–Ω–µ—Ç': ['–Ω–µ –¥–æ–≤–µ—Ä—è—é', '–Ω–∏–∫–æ–≥–¥–∞'],
    '–Ω–∏–∫–∞–∫–æ–π –ª–æ–≥–∏–∫–∏': ['–¥—Ä—É–≥–æ–µ'],
    '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–ª–µ—Ç–∞–µ—Ç': ['–¥—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π'],
    '—á–∞—Å—Ç–æ –∑–∞–≤–∏—Å–∞–µ—Ç': ['–¥—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π'],
    '–µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è': ['—Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤'],
    'whatsapp': ['—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏'],
    'telegram': ['—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏']
  };
  
  for (const [synonym, variants] of Object.entries(synonyms)) {
    if (s1.includes(synonym) || s2.includes(synonym)) {
      for (const variant of variants) {
        if (s1.includes(variant) || s2.includes(variant)) {
          return 0.9;
        }
      }
    }
  }
  
  // –û–±—ã—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
  let matches = 0;
  for (let i = 0; i < Math.min(s1.length, s2.length); i++) {
    if (s1[i] === s2[i]) matches++;
  }
  return matches / Math.max(s1.length, s2.length);
}

function sleep(ms) {
  return new Promise(res => setTimeout(res, ms));
}

function randomDelay(min, max) {
  return sleep(Math.floor(Math.random() * (max - min + 1)) + min);
}

async function getFormQuestions(page) {
  console.log('üîç –ò—â—É –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–µ...');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  const selectors = [
    'div.freebirdFormviewerComponentsQuestionBaseRoot',
    'div[data-item-id]',
    'div[role="listitem"]',
    'div.freebirdFormviewerComponentsQuestionBaseTitle',
    'div[data-params*="question"]'
  ];
  
  for (const selector of selectors) {
    const questions = await page.evaluate((sel) => {
      const elements = document.querySelectorAll(sel);
      console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${sel}:`, elements.length);
      return Array.from(elements).map(el => ({
        text: el.innerText.trim(),
        html: el.innerHTML.substring(0, 200) + '...',
        selector: sel,
        element: el
      }));
    }, selector);
    
    if (questions.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫–∏)
      const questionHeaders = questions.map(q => {
        const lines = q.text.split('\n');
        const header = lines[0].trim();
        return {
          header: header,
          fullText: q.text,
          element: q.element
        };
      });
      
      questionHeaders.forEach((q, i) => {
        console.log(`  ${i + 1}. "${q.header}"`);
      });
      
      return questionHeaders;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–≤–µ–¥–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  console.log('‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
  const pageStructure = await page.evaluate(() => {
    const allDivs = Array.from(document.querySelectorAll('div')).slice(0, 50);
    return allDivs.map(div => ({
      className: div.className,
      id: div.id,
      text: div.innerText.substring(0, 100),
      role: div.getAttribute('role')
    }));
  });
  
  console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 50 div):');
  pageStructure.forEach((item, i) => {
    console.log(`  ${i + 1}. class="${item.className}" id="${item.id}" role="${item.role}" text="${item.text}"`);
  });
  
  return [];
}

async function fillForm(page, row, columns, formQuestions) {
  console.log(`üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏...`);
  
  for (const col of columns) {
    const value = row[col];
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∫–æ–ª–æ–Ω–∫—É "–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"
    if (col.toLowerCase().includes('–æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏')) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é: ${col}`);
      continue;
    }
    
    // –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const isMobileFunctionsQuestion = col.toLowerCase().includes('—Ñ—É–Ω–∫—Ü–∏–π') && col.toLowerCase().includes('–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    
    if (!value && !isMobileFunctionsQuestion) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é: ${col} (–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)`);
      continue;
    }
    
    const excelQuestion = col;
    console.log(`\nüîç –ò—â—É –≤–æ–ø—Ä–æ—Å: "${excelQuestion}"`);
    
    // –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—è—Ç—É—é, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    let finalValue = value;
    if (isMobileFunctionsQuestion && (!value || value.trim() === '' || value.trim() === ',')) {
      const randomFunctions = [
        '–ö–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ó–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è',
        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –ü–æ–∏—Å–∫ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é',
        '–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        '–ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏, –í–∏–¥–µ–æ-—É—Ä–æ–∫–∏',
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏, –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        '–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–∫—Ü–∏–∏, –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤',
        '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'
      ];
      finalValue = randomFunctions[Math.floor(Math.random() * randomFunctions.length)];
      console.log(`üìÑ –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∑–∞–ø–æ–ª–Ω—è—é —Å–ª—É—á–∞–π–Ω—ã–º: "${finalValue}"`);
    } else {
      console.log(`üìÑ –ó–Ω–∞—á–µ–Ω–∏–µ: "${value}"`);
    }

    if (formQuestions.length === 0) {
      console.log(`‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–µ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);
      continue;
    }

    // Fuzzy matching: –∏—â–µ–º –ª—É—á—à–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    try {
      const questionHeaders = formQuestions.map(q => q.header);
      const { bestMatch } = stringSimilarity.findBestMatch(excelQuestion, questionHeaders);
      const questionHeader = bestMatch.target;
      const rating = bestMatch.rating;
      
      console.log(`üéØ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${questionHeader}" (—Ä–µ–π—Ç–∏–Ω–≥: ${rating.toFixed(2)})`);
      
      if (rating < 0.4) {
        console.log(`‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è: ${excelQuestion}`);
        continue;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º—ã
      const questionData = formQuestions.find(q => q.header === questionHeader);
      if (!questionData) {
        console.log(`‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: ${questionHeader}`);
        continue;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–ø–æ–ª–Ω—è—é...`);

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ radio/checkbox –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
      const radioClicked = await page.evaluate((questionText, value) => {
        // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
        const blocks = Array.from(document.querySelectorAll('div[role="listitem"]'));
        const targetBlock = blocks.find(block => block.innerText.includes(questionText));
        
        if (!targetBlock) {
          console.log(`–ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${questionText}`);
          return false;
        }
        
        // –ò—â–µ–º –≤—Å–µ radio –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏
        const radios = targetBlock.querySelectorAll('[role=radio]');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${radios.length} radio –∫–Ω–æ–ø–æ–∫`);
        
        for (let i = 0; i < radios.length; i++) {
          const radio = radios[i];
          
          // –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ - –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–æ—Å–µ–¥–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
          let optionText = '';
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
          const parent = radio.closest('div[role="radio"]') || radio.parentElement;
          if (parent) {
            optionText = parent.innerText.trim();
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
          if (!optionText) {
            const siblings = Array.from(radio.parentElement.children);
            for (const sibling of siblings) {
              if (sibling !== radio && sibling.innerText.trim()) {
                optionText = sibling.innerText.trim();
                break;
              }
            }
          }
          
          // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ aria-label
          if (!optionText && radio.getAttribute('aria-label')) {
            optionText = radio.getAttribute('aria-label');
          }
          
          console.log(`–ü—Ä–æ–≤–µ—Ä—è—é radio ${i + 1}: "${optionText}"`);
          
          if (optionText && optionText.includes(value)) {
            console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ö–ª–∏–∫–∞—é: "${optionText}"`);
            radio.click();
            return true;
          }
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º fuzzy matching
        console.log(`–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É—é fuzzy matching...`);
        const allOptions = [];
        for (let i = 0; i < radios.length; i++) {
          const radio = radios[i];
          let optionText = '';
          
          const parent = radio.closest('div[role="radio"]') || radio.parentElement;
          if (parent) {
            optionText = parent.innerText.trim();
          }
          
          if (!optionText) {
            const siblings = Array.from(radio.parentElement.children);
            for (const sibling of siblings) {
              if (sibling !== radio && sibling.innerText.trim()) {
                optionText = sibling.innerText.trim();
                break;
              }
            }
          }
          
          if (optionText) {
            allOptions.push({ text: optionText, radio: radio });
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ–∏—Å–∫–µ
        if (questionText.includes('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ')) {
          console.log('üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ–∏—Å–∫–µ...');
          console.log(`üìÑ –ò—â–µ–º –æ—Ç–≤–µ—Ç: "${value}"`);
          
          // –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
          const searchOptions = [];
          for (let i = 0; i < radios.length; i++) {
            const radio = radios[i];
            let optionText = '';
            
            // –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            const parent = radio.closest('div[role="radio"]') || radio.parentElement;
            if (parent) {
              optionText = parent.innerText.trim();
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            if (!optionText) {
              const siblings = Array.from(radio.parentElement.children);
              for (const sibling of siblings) {
                if (sibling !== radio && sibling.innerText.trim()) {
                  optionText = sibling.innerText.trim();
                  break;
                }
              }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º aria-label
            if (!optionText && radio.getAttribute('aria-label')) {
              optionText = radio.getAttribute('aria-label');
            }
            
            if (optionText) {
              searchOptions.push({ text: optionText, radio: radio });
              console.log(`üìã –í–∞—Ä–∏–∞–Ω—Ç ${i + 1}: "${optionText}"`);
            }
          }
          
          console.log(`üìã –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${searchOptions.length}`);
          
          // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ –ø–æ–∏—Å–∫–µ
          const searchMapping = {
            '—Ä–µ–¥–∫–æ': '–ò–Ω–æ–≥–¥–∞',
            '—á–∞—Å—Ç–æ': '–í—Å–µ–≥–¥–∞', 
            '–≤—Å–µ–≥–¥–∞': '–í—Å–µ–≥–¥–∞',
            '–∏–Ω–æ–≥–¥–∞': '–ò–Ω–æ–≥–¥–∞',
            '–Ω–∏–∫–æ–≥–¥–∞': '–ù–∏–∫–æ–≥–¥–∞',
            '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ': '–í—Å–µ–≥–¥–∞',
            '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏': '–ò–Ω–æ–≥–¥–∞'
          };
          
          const normalizedValue = value.toLowerCase().trim();
          const mappedOption = searchMapping[normalizedValue];
          
          console.log(`üéØ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${normalizedValue}"`);
          console.log(`üéØ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: "${mappedOption}"`);
          
          if (mappedOption) {
            const targetOption = searchOptions.find(opt => opt.text === mappedOption);
            if (targetOption) {
              console.log(`‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: "${value}" ‚Üí "${mappedOption}"`);
              targetOption.radio.click();
              return true;
            } else {
              console.log(`‚ùå –í–∞—Ä–∏–∞–Ω—Ç "${mappedOption}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö`);
              console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ${searchOptions.map(opt => opt.text).join(', ')}`);
            }
          } else {
            console.log(`‚ùå –ù–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${normalizedValue}"`);
          }
        }
        
        // –û–±—ã—á–Ω—ã–π fuzzy matching –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if (allOptions.length > 0) {
          let bestMatch = null;
          let bestScore = 0;
          
          for (const option of allOptions) {
            const score = calculateSimilarity(value.toLowerCase(), option.text.toLowerCase());
            console.log(`Fuzzy match: "${value}" ‚Üí "${option.text}" (—Ä–µ–π—Ç–∏–Ω–≥: ${score.toFixed(2)})`);
            
            if (score > bestScore && score >= 0.7) {
              bestScore = score;
              bestMatch = option;
            }
          }
          
          if (bestMatch) {
            console.log(`‚úÖ Fuzzy match: "${value}" ‚Üí "${bestMatch.text}" (—Ä–µ–π—Ç–∏–Ω–≥: ${bestScore.toFixed(2)})`);
            bestMatch.radio.click();
            return true;
          }
        }
        
        // –ï—Å–ª–∏ fuzzy matching –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...');
        
                  // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
          const forcedMappings = {
            // –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            '–∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π': {
              '—Ä–µ–¥–∫–æ': ['–†–∞–∑ –≤ –º–µ—Å—è—Ü', '–†–µ–∂–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü'],
              '—á–∞—Å—Ç–æ': ['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'],
              '–≤—Å–µ–≥–¥–∞': ['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'],
              '–∏–Ω–æ–≥–¥–∞': ['–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', '–†–∞–∑ –≤ –º–µ—Å—è—Ü'],
              '–Ω–∏–∫–æ–≥–¥–∞': ['–í–ø–µ—Ä–≤—ã–µ', '–†–µ–∂–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü–∞'],
              '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ': ['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'],
              '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏': ['–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', '–†–∞–∑ –≤ –º–µ—Å—è—Ü']
            },
          // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
          '—Å –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞': {
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': '–¢–µ–ª–µ—Ñ–æ–Ω',
            '—Ç–µ–ª–µ—Ñ–æ–Ω': '–¢–µ–ª–µ—Ñ–æ–Ω',
            '–∫–æ–º–ø—å—é—Ç–µ—Ä': '–ö–æ–º–ø—å—é—Ç–µ—Ä/–Ω–æ—É—Ç–±—É–∫',
            '–Ω–æ—É—Ç–±—É–∫': '–ö–æ–º–ø—å—é—Ç–µ—Ä/–Ω–æ—É—Ç–±—É–∫',
            '–ø–ª–∞–Ω—à–µ—Ç': '–ü–ª–∞–Ω—à–µ—Ç',
            '–¥—Ä—É–≥–æ–µ': '–î—Ä—É–≥–æ–µ'
          },
          // –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –º–µ–Ω—é
          '–∫–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏': {
            '–Ω–∏–∫–∞–∫–æ–π –ª–æ–≥–∏–∫–∏': '–î—Ä—É–≥–æ–µ',
            '–Ω–∏–∫–∞–∫–æ–π –ª–æ–≥–∏–∫–∏ –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏': '–î—Ä—É–≥–æ–µ',
            '–ø—É—Ç–∞—é—Å—å': '–î—Ä—É–≥–æ–µ',
            '–≤—Å–µ –∑–∞–ø—É—Ç–∞–Ω–æ': '–î—Ä—É–≥–æ–µ',
            '—Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏': '–ù—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏',
            '–º–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–æ–≤': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–æ–≤',
            '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ': '–ù–µ–ø–æ–Ω—è—Ç–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤'
          },
          // –ú–æ—Ç–∏–≤–∞—Ü–∏—è
          '—á—Ç–æ –º–æ–≥–ª–æ –±—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å': {
            '–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è': '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
            '–µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è': '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
            '–µ—Å–ª–∏ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—â–µ': '–£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞',
            '–±–æ–Ω—É—Å—ã': '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
            '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
          },
          // –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
          '–∫–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å': {
            '–∞–∫—Ç—É–∞–ª—å–Ω–∞—è': '–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞',
            '—á–∞—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è': '–ò–Ω–æ–≥–¥–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è',
            '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç': '–ß–∞—Å—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            '–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ—Ç–∞–ª–µ–π': '–ò–Ω–æ–≥–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ—Ç–∞–ª–µ–π'
          },
          // –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          '–∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π': {
            'whatsapp': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
            'telegram': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
            'whatsapp, telegram, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
            'push': 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'email': 'Email',
            'sms': 'SMS',
            '—Å–º—Å': 'SMS'
          },
          // –î–æ–≤–µ—Ä–∏–µ
          '–¥–æ–≤–µ—Ä—è–µ—Ç–µ –ª–∏ –≤—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ': {
            '–Ω–µ—Ç': '–ù–µ –¥–æ–≤–µ—Ä—è—é',
            '–¥–∞': '–ü–æ–ª–Ω–æ—Å—Ç—å—é',
            '—Å–∫–æ—Ä–µ–µ –Ω–µ—Ç': '–ù–µ –¥–æ–≤–µ—Ä—è—é',
            '—á–∞—Å—Ç–∏—á–Ω–æ': '–ß–∞—Å—Ç–∏—á–Ω–æ'
          },
          // –¢—Ä—É–¥–Ω–æ—Å—Ç–∏
          '–∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏ –ª–∏ –≤—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏': {
            '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–ª–µ—Ç–∞–µ—Ç': '–î—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π',
            '—á–∞—Å—Ç–æ –∑–∞–≤–∏—Å–∞–µ—Ç': '–î—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π',
            '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–ª–µ—Ç–∞–µ—Ç, —á–∞—Å—Ç–æ –∑–∞–≤–∏—Å–∞–µ—Ç': '–î—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π',
            '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ—É–¥–æ–±–Ω—ã–π': '–î—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π',
            '–Ω–µ—É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å': '–î—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π'
          }
        };
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        for (const [questionPattern, mappings] of Object.entries(forcedMappings)) {
          if (questionText.toLowerCase().includes(questionPattern)) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è: "${questionPattern}"`);
            
            const normalizedValue = value.toLowerCase().trim();
            const mappedOptions = mappings[normalizedValue];
            
            if (mappedOptions) {
              // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
              const mappedOption = Array.isArray(mappedOptions) 
                ? mappedOptions[Math.floor(Math.random() * mappedOptions.length)]
                : mappedOptions;
              
              // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
              let targetOption = allOptions.find(opt => opt.text === mappedOption);
              
              // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
              if (!targetOption) {
                targetOption = allOptions.find(opt => 
                  opt.text.toLowerCase().includes(mappedOption.toLowerCase()) ||
                  mappedOption.toLowerCase().includes(opt.text.toLowerCase())
                );
              }
              
              if (targetOption) {
                console.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: "${value}" ‚Üí "${targetOption.text}"`);
                targetOption.radio.click();
                return true;
                              } else {
                  console.log(`‚ùå –í–∞—Ä–∏–∞–Ω—Ç "${mappedOption}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö`);
                  console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏: [${allOptions.map(opt => `"${opt.text}"`).join(', ')}]`);
                }
            } else {
              console.log(`‚ùå –ù–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è "${normalizedValue}" –≤ "${questionPattern}"`);
            }
            break;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (—á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å)
        if (allOptions.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–Ω–¥–æ–º–∞ - –∏—Å–∫–ª—é—á–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
          let randomIdx;
          if (allOptions.length > 2) {
            // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å 3+ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π (—á–∞—Å—Ç–æ —ç—Ç–æ –∫—Ä–∞–π–Ω–æ—Å—Ç–∏)
            randomIdx = 1 + Math.floor(Math.random() * (allOptions.length - 2));
          } else {
            // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å 1-2 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π
            randomIdx = Math.floor(Math.random() * allOptions.length);
          }
          console.log(`üé≤ –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç #${randomIdx + 1}: "${allOptions[randomIdx].text}"`);
          allOptions[randomIdx].radio.click();
          return true;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–µ—Å—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∞), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if (questionText.includes('*')) {
          console.log(`üé≤ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –∑–≤–µ–∑–¥–æ—á–∫–æ–π`);
          const radios = targetBlock.querySelectorAll('[role="radio"]');
          console.log(`üé≤ –ù–∞–π–¥–µ–Ω–æ ${radios.length} radio –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞`);
          if (radios.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–Ω–¥–æ–º–∞
            let randomIdx;
            if (radios.length > 2) {
              // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å 3+ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∞–Ω–¥–æ–º
              if (Math.random() < 0.7) {
                // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                randomIdx = 1 + Math.floor(Math.random() * (radios.length - 2));
              } else {
                // 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                randomIdx = Math.floor(Math.random() * radios.length);
              }
            } else {
              randomIdx = Math.floor(Math.random() * radios.length);
            }
            console.log(`üé≤ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–∞—é —Å–ª—É—á–∞–π–Ω—É—é radio –∫–Ω–æ–ø–∫—É #${randomIdx + 1}`);
            radios[randomIdx].click();
            return true;
          }
        }
        
        return false;
      }, questionHeader, finalValue);
      
      if (radioClicked) {
        console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ radio: "${value}"`);
        continue;
      }

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ input/textarea
      const inputFilled = await page.evaluate((questionText, value) => {
        const blocks = Array.from(document.querySelectorAll('div[role="listitem"]'));
        const targetBlock = blocks.find(block => block.innerText.includes(questionText));
        
        if (!targetBlock) {
          console.log(`‚ùå –ë–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: "${questionText}"`);
          return false;
        }
        
        // –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        let input = targetBlock.querySelector('input[type="text"], textarea, input[type="email"], input[type="url"]');
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        if (!input) {
          input = targetBlock.querySelector('input, textarea');
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ —Ä–æ–ª–∏
        if (!input) {
          input = targetBlock.querySelector('[role="textbox"], [contenteditable="true"]');
        }
        
        if (input) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω input/textarea –¥–ª—è: "${questionText}"`);
          console.log(`üìù –ó–∞–ø–æ–ª–Ω—è—é —Ç–µ–∫—Å—Ç–æ–º: "${value}"`);
          
          try {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            input.focus();
            input.click();
            
            // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            input.value = '';
            input.textContent = '';
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            const textToFill = String(value);
            
            // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ value
            if (input.tagName === 'INPUT' || input.tagName === 'TEXTAREA') {
              input.value = textToFill;
              input.dispatchEvent(new Event('input', { bubbles: true }));
              input.dispatchEvent(new Event('change', { bubbles: true }));
            }
            
            // –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ textContent –¥–ª—è contenteditable
            if (input.getAttribute('contenteditable') === 'true') {
              input.textContent = textToFill;
              input.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            // –°–ø–æ—Å–æ–± 3: —Å–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–æ–≤
            input.focus();
            for (const char of textToFill) {
              input.value += char;
              input.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            return true;
          } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è: ${error.message}`);
            return false;
          }
        } else {
          console.log(`‚ùå –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–ª–æ–∫–µ –¥–ª—è: "${questionText}"`);
          console.log(`üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–ª–æ–∫–µ:`, targetBlock.innerHTML.substring(0, 200) + '...');
          return false;
        }
      }, questionHeader, finalValue);
      
      if (inputFilled) {
        console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ input/textarea: "${value}"`);
        continue;
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
      if (questionHeader.toLowerCase().includes('—Ñ—É–Ω–∫—Ü–∏–π') && questionHeader.toLowerCase().includes('–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏') ||
          questionHeader.toLowerCase().includes('–∏–∑–º–µ–Ω–µ–Ω–∏—è') && questionHeader.toLowerCase().includes('–ø–ª–∞—Ç—Ñ–æ—Ä–º—É')) {
        console.log(`üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: "${questionHeader}"`);
        
        const specialInputFilled = await page.evaluate((questionText, value) => {
          const blocks = Array.from(document.querySelectorAll('div[role="listitem"]'));
          const targetBlock = blocks.find(block => block.innerText.includes(questionText));
          
          if (!targetBlock) {
            console.log(`‚ùå –ë–ª–æ–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
          }
          
          // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
          const inputs = targetBlock.querySelectorAll('input, textarea, [role="textbox"], [contenteditable="true"]');
          console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${inputs.length} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π`);
          
          for (const input of inputs) {
            try {
              console.log(`üîß –ü—Ä–æ–±—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ —Ç–∏–ø–∞: ${input.tagName}`);
              
              // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ
              input.focus();
              input.click();
              
              // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
              if (input.tagName === 'INPUT' || input.tagName === 'TEXTAREA') {
                input.value = '';
              } else {
                input.textContent = '';
              }
              
              // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç
              const textToFill = String(value);
              
              if (input.tagName === 'INPUT' || input.tagName === 'TEXTAREA') {
                input.value = textToFill;
                input.dispatchEvent(new Event('input', { bubbles: true }));
                input.dispatchEvent(new Event('change', { bubbles: true }));
              } else {
                input.textContent = textToFill;
                input.dispatchEvent(new Event('input', { bubbles: true }));
              }
              
              console.log(`‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: "${textToFill}"`);
              return true;
            } catch (error) {
              console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è: ${error.message}`);
              continue;
            }
          }
          
          return false;
        }, questionHeader, finalValue);
        
        if (specialInputFilled) {
          console.log(`‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: "${questionHeader}"`);
          continue;
        }
      }

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ (–∑–≤–µ–∑–¥—ã)
      const ratingClicked = await page.evaluate((questionText, value) => {
        const blocks = Array.from(document.querySelectorAll('div[role="listitem"]'));
        const targetBlock = blocks.find(block => block.innerText.includes(questionText));
        
        if (!targetBlock) return false;
        
        const radios = targetBlock.querySelectorAll('[role=radio]');
        for (const radio of radios) {
          if (radio.innerText.trim() === String(value).trim()) {
            radio.click();
            return true;
          }
        }
        return false;
      }, questionHeader, finalValue);
      
      if (ratingClicked) {
        console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥: "${value}"`);
        continue;
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –Ω–æ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      if (questionHeader.includes('*')) {
        console.log(`üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: "${questionHeader}"`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ª—é–±—É—é radio –∫–Ω–æ–ø–∫—É –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
        const forcedClick = await page.evaluate((questionText) => {
          console.log(`üîç –ò—â—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ radio –∫–Ω–æ–ø–∫–∏ –¥–ª—è: "${questionText}"`);
          
          const blocks = Array.from(document.querySelectorAll('div[role="listitem"]'));
          console.log(`üìã –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${blocks.length}`);
          
          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–∞
          let targetBlock = null;
          
          // –°–ø–æ—Å–æ–± 1: –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
          for (const block of blocks) {
            if (block.innerText.includes(questionText)) {
              targetBlock = block;
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É`);
              break;
            }
          }
          
          // –°–ø–æ—Å–æ–± 2: –ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
          if (!targetBlock) {
            const searchText = questionText.split('?')[0].substring(0, 20);
            console.log(`üîç –ò—â—É –ø–æ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞: "${searchText}"`);
            for (const block of blocks) {
              if (block.innerText.includes(searchText)) {
                targetBlock = block;
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ø–æ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞`);
                break;
              }
            }
          }
          
          // –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–µ—Å–ª–∏ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
          if (!targetBlock) {
            console.log(`üîç –ò—â—É –ª—é–±–æ–π –±–ª–æ–∫ —Å radio –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–æ—á–∫–æ–π`);
            for (const block of blocks) {
              if (block.innerText.includes('*')) {
                const radios = block.querySelectorAll('[role="radio"]');
                if (radios.length > 0) {
                  targetBlock = block;
                  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å radio –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–æ—á–∫–æ–π`);
                  break;
                }
              }
            }
          }
          
          if (!targetBlock) {
            console.log(`‚ùå –ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
          }
          
          const radioButtons = targetBlock.querySelectorAll('[role="radio"]');
          console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${radioButtons.length} radio –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞`);
          
          if (radioButtons.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–Ω–¥–æ–º–∞
            let randomIdx;
            if (radioButtons.length > 2) {
              // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å 3+ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∞–Ω–¥–æ–º
              if (Math.random() < 0.65) {
                // 65% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                randomIdx = 1 + Math.floor(Math.random() * (radioButtons.length - 2));
              } else {
                // 35% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                randomIdx = Math.floor(Math.random() * radioButtons.length);
              }
            } else {
              randomIdx = Math.floor(Math.random() * radioButtons.length);
            }
            console.log(`üé≤ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–∞—é —Å–ª—É—á–∞–π–Ω—É—é radio –∫–Ω–æ–ø–∫—É #${randomIdx + 1}`);
            radioButtons[randomIdx].click();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª
            setTimeout(() => {
              const isChecked = radioButtons[randomIdx].checked;
              console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: radio –∫–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ = ${isChecked}`);
            }, 100);
            
            return true;
          }
          
          return false;
        }, questionHeader);
        
        if (forcedClick) {
          console.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ radio –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞`);
          continue;
        } else {
          console.log(`‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: ${excelQuestion}`);
        }
      } else {
        console.log(`‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å: ${excelQuestion}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏: ${error.message}`);
      continue;
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  console.log('\nüö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...');
  
  const filledCount = await page.evaluate(() => {
    const blocks = Array.from(document.querySelectorAll('div[role="listitem"]'));
    let filled = 0;
    
    blocks.forEach((block, index) => {
      const text = block.innerText;
      if (text.includes('*')) {
        const radioButtons = block.querySelectorAll('[role="radio"]');
        const hasCheckedRadio = Array.from(radioButtons).some(radio => radio.getAttribute('aria-checked') === 'true');
        
        if (radioButtons.length > 0 && !hasCheckedRadio) {
          // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–Ω–¥–æ–º–∞ –≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
          let randomIdx;
          if (radioButtons.length > 2) {
            // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å 3+ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∞–Ω–¥–æ–º
            // 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, 40% - –ª—é–±—ã–µ
            if (Math.random() < 0.6) {
              randomIdx = 1 + Math.floor(Math.random() * (radioButtons.length - 2));
            } else {
              randomIdx = Math.floor(Math.random() * radioButtons.length);
            }
          } else {
            randomIdx = Math.floor(Math.random() * radioButtons.length);
          }
          console.log(`üé≤ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è—é –≤–æ–ø—Ä–æ—Å ${index + 1} —Å–ª—É—á–∞–π–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º #${randomIdx + 1}`);
          radioButtons[randomIdx].click();
          filled++;
        }
      }
    });
    
    return filled;
  });
  
  console.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ${filledCount} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤`);
  
  // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  await sleep(1000);
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Google –§–æ—Ä–º—ã');
  console.log('=' .repeat(50));
  
  // –ß—Ç–µ–Ω–∏–µ Excel
  console.log('üìä –ß–∏—Ç–∞—é Excel —Ñ–∞–π–ª...');
  const workbook = xlsx.readFile(EXCEL_FILE);
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  const data = xlsx.utils.sheet_to_json(sheet);
  const columns = Object.keys(data[0]);
  const endRow = MAX_ROWS ? START_ROW + MAX_ROWS : data.length;

  console.log(`üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ Excel: ${data.length}`);
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Excel:`, columns);

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
  console.log('üåê –û—Ç–∫—Ä—ã–≤–∞—é Google –§–æ—Ä–º—É...');
  const browser = await puppeteer.launch({ 
    headless: HEADLESS, 
    defaultViewport: null,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const page = await browser.newPage();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  page.on('console', msg => console.log('üåê –ë—Ä–∞—É–∑–µ—Ä:', msg.text()));
  
  await page.goto(FORM_URL, { waitUntil: 'networkidle2' });
  console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  await sleep(3000);
  
  const formQuestions = await getFormQuestions(page);
  console.log(`\nüìù –í–æ–ø—Ä–æ—Å—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ (${formQuestions.length}):`, formQuestions);

  console.log(`\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`);
  console.log(`   - –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Å ${START_ROW + 1} –ø–æ ${endRow}`);
  console.log(`   - –†–µ–∂–∏–º headless: ${HEADLESS}`);

  for (let i = START_ROW; i < endRow && i < data.length; i++) {
    const row = data[i];
    console.log(`\n${'='.repeat(50)}`);
    console.log(`üìù –ó–∞–ø–æ–ª–Ω—è—é –∑–∞–ø–∏—Å—å #${i + 1}`);
    console.log(`${'='.repeat(50)}`);
    
    await page.goto(FORM_URL, { waitUntil: 'networkidle2' });
    await sleep(2000);
    await fillForm(page, row, columns, formQuestions);
    
    // –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
    console.log('üì§ –ò—â—É –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏...');
    const submitBtn = await page.evaluateHandle(() => {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
      const selectors = [
        'div[role="button"]:has(span:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"))',
        'div[aria-label="Submit"]',
        'div[jsname="M2UYVd"]',
        'div.uArJ5e:has(.NPEfkd)',
        'span.NPEfkd:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")',
        'div[role="button"] span:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")'
      ];
      
      for (const selector of selectors) {
        try {
          const elements = document.querySelectorAll(selector);
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
          if (elements.length > 0) {
            return elements[0];
          }
        } catch (e) {
          console.log(`–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, e.message);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
      const allButtons = Array.from(document.querySelectorAll('div[role="button"], span[role="button"]'));
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${allButtons.length} –∫–Ω–æ–ø–æ–∫`);
      allButtons.forEach((btn, i) => {
        console.log(`–ö–Ω–æ–ø–∫–∞ ${i + 1}: "${btn.innerText}"`);
      });
      
      const submitButton = allButtons.find(btn => 
        btn.innerText && btn.innerText.includes('–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
      );
      
      return submitButton || null;
    });
    
    const isSubmitDefined = await page.evaluate(btn => !!btn, submitBtn);
    if (isSubmitDefined) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞—é...');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∫–ª–∏–∫–∞
      try {
        // –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
        await submitBtn.click();
        console.log('‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞
        await sleep(2000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        const successMessage = await page.evaluate(() => {
          const messages = Array.from(document.querySelectorAll('div, span'));
          return messages.find(msg => 
            msg.innerText && (
              msg.innerText.includes('–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
              msg.innerText.includes('–°–ø–∞—Å–∏–±–æ') ||
              msg.innerText.includes('–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω') ||
              msg.innerText.includes('—É—Å–ø–µ—à–Ω–æ') ||
              msg.innerText.includes('–∑–∞–ø–∏—Å–∞–Ω–æ') ||
              msg.innerText.includes('–ø–æ–ª—É—á–µ–Ω')
            )
          );
        });
        
        if (successMessage) {
          console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        } else {
          console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          const confirmDialog = await page.evaluate(() => {
            const dialogs = Array.from(document.querySelectorAll('div[role="dialog"], div[role="alert"]'));
            return dialogs.find(dialog => 
              dialog.innerText && (
                dialog.innerText.includes('–û—Ç–ø—Ä–∞–≤–∏—Ç—å') ||
                dialog.innerText.includes('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') ||
                dialog.innerText.includes('Submit')
              )
            );
          });
          
          if (confirmDialog) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–ª–∏–∫–∞—é...');
            await confirmDialog.click();
            await sleep(2000);
          }
          
          // –°–ø–æ—Å–æ–± 2: –ö–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
          await page.evaluate((btn) => {
            btn.dispatchEvent(new MouseEvent('click', {
              bubbles: true,
              cancelable: true,
              view: window
            }));
          }, submitBtn);
          
          await sleep(2000);
          
          // –°–ø–æ—Å–æ–± 3: –ù–∞–∂–∞—Ç–∏–µ Enter –Ω–∞ –∫–Ω–æ–ø–∫–µ
          await page.keyboard.press('Tab');
          await sleep(500);
          await page.keyboard.press('Enter');
          
          console.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
          
          // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
          await sleep(3000);
          const finalCheck = await page.evaluate(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL (–ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
            if (window.location.href.includes('formResponse')) {
              return 'URL –∏–∑–º–µ–Ω–∏–ª—Å—è - —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            const messages = Array.from(document.querySelectorAll('div, span'));
            const successMsg = messages.find(msg => 
              msg.innerText && (
                msg.innerText.includes('–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
                msg.innerText.includes('–°–ø–∞—Å–∏–±–æ') ||
                msg.innerText.includes('–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω') ||
                msg.innerText.includes('—É—Å–ø–µ—à–Ω–æ') ||
                msg.innerText.includes('–∑–∞–ø–∏—Å–∞–Ω–æ') ||
                msg.innerText.includes('–ø–æ–ª—É—á–µ–Ω')
              )
            );
            
            if (successMsg) {
              return '–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            const submitBtn = document.querySelector('div[aria-label="Submit"]');
            if (!submitBtn) {
              return '–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—á–µ–∑–ª–∞ - —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞';
            }
            
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏';
          });
          
          console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: ${finalCheck}`);
          
          // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          if (finalCheck === '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏') {
            console.log('üîÑ –ü—Ä–æ–±—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É...');
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            await sleep(2000);
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ
            const retryBtn = await page.evaluateHandle(() => {
              const btn = document.querySelector('div[aria-label="Submit"]');
              return btn;
            });
            
            const isRetryBtnDefined = await page.evaluate(btn => !!btn, retryBtn);
            if (isRetryBtnDefined) {
              // –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript —Å –ø–æ–ª–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
              await page.evaluate((btn) => {
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                const clickEvent = new MouseEvent('click', {
                  view: window,
                  bubbles: true,
                  cancelable: true,
                  clientX: btn.getBoundingClientRect().left + 10,
                  clientY: btn.getBoundingClientRect().top + 10
                });
                
                btn.dispatchEvent(clickEvent);
                
                // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º focus –∏ enter
                btn.focus();
                setTimeout(() => {
                  btn.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter', code: 'Enter' }));
                  btn.dispatchEvent(new KeyboardEvent('keyup', { key: 'Enter', code: 'Enter' }));
                }, 100);
              }, retryBtn);
              
              await sleep(3000);
              
              // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
              const retryCheck = await page.evaluate(() => {
                if (window.location.href.includes('formResponse')) {
                  return 'URL –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏';
                }
                
                const messages = Array.from(document.querySelectorAll('div, span'));
                const successMsg = messages.find(msg => 
                  msg.innerText && (
                    msg.innerText.includes('–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
                    msg.innerText.includes('–°–ø–∞—Å–∏–±–æ') ||
                    msg.innerText.includes('–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
                  )
                );
                
                if (successMsg) {
                  return '–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏';
                }
                
                return '–§–æ—Ä–º–∞ –≤—Å–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞';
              });
              
              console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: ${retryCheck}`);
            }
          }
          
          // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ
          console.log('‚è≥ –ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω"...');
          await sleep(2000);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω"
          const isOnResponsePage = await page.evaluate(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            if (window.location.href.includes('formResponse')) {
              return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const pageText = document.body.innerText;
            if (pageText.includes('–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') || 
                pageText.includes('–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
                pageText.includes('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç')) {
              return true;
            }
            
            return false;
          });
          
          if (isOnResponsePage) {
            console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω"');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
            console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Ñ–æ—Ä–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞...');
            await page.goto(FORM_URL, { waitUntil: 'networkidle2' });
            await sleep(2000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            const formLoaded = await page.evaluate(() => {
              const questions = document.querySelectorAll('div[role="listitem"]');
              return questions.length > 0;
            });
            
            if (formLoaded) {
              console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ—Ç–≤–µ—Ç—É');
            } else {
              console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é...');
              await page.reload({ waitUntil: 'networkidle2' });
              await sleep(2000);
            }
          } else {
            console.log('‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è');
          }
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ:', error.message);
        
        // –°–ø–æ—Å–æ–± 4: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ –∏ –∫–ª–∏–∫–Ω—É—Ç—å
        try {
          const newSubmitBtn = await page.$('div[role="button"]:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")');
          if (newSubmitBtn) {
            await newSubmitBtn.click();
            console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω');
          }
        } catch (e) {
          console.log('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è:', e.message);
        }
      }
      
      await sleep(3000); // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } else {
      console.log('‚ùó –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ –¥—Ä—É–≥–æ–º—É
      const alternativeBtn = await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('*'));
        return buttons.find(el => 
          el.innerText && el.innerText.toLowerCase().includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
        );
      });
      
      if (alternativeBtn) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        await alternativeBtn.click();
      }
    }
    
    // –ñ–¥–µ–º –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    if (i < endRow - 1) {
      const delay = Math.floor(Math.random() * (DELAY_BETWEEN[1] - DELAY_BETWEEN[0] + 1)) + DELAY_BETWEEN[0];
      console.log(`‚è≥ –ñ–¥—É ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π...`);
      await sleep(delay);
    }
  }

  await browser.close();
  console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!');
}

main().catch(e => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', e);
  process.exit(1);
}); 